# 1. Extract error 502 logs older than 24 hours
awk '$9 == 502 && $4 < strftime("[%d/%b/%Y:%H:%M:%S", systime() - 86400)' access.log

# 2. Secure Docker images
docker scan <image-name>  # Scan for vulnerabilities
docker history <image-name>  # Check for unnecessary layers
docker inspect <image-name> | grep 'User'  # Ensure non-root user
docker build --no-cache --squash -t secure-image:v1 .  # Minimize layers

# 3. Manage Persistent Volume in Docker
docker volume create myvolume
docker run -d -v myvolume:/data --name mycontainer myimage
docker inspect myvolume  # Verify volume details

# 4. Create Jenkins Pipeline
echo "pipeline {
    agent any
    stages {
        stage('Build') { steps { sh 'mvn clean package' } }
        stage('Test') { steps { sh 'mvn test' } }
        stage('Deploy') { steps { sh 'kubectl apply -f deployment.yaml' } }
    }
}" > Jenkinsfile
cat Jenkinsfile  # Verify pipeline file

# 5. Setup Infrastructure with Terraform
mkdir terraform-project && cd terraform-project
echo 'provider "aws" { region = "us-east-1" }' > main.tf
terraform init
terraform plan
terraform apply -auto-approve

# 6. Secure resource from terraform destroy
echo 'resource "aws_instance" "example" {
  ami = "ami-123456"
  lifecycle { prevent_destroy = true }
}' > main.tf
terraform apply -auto-approve

# 7. Store backend statefile in Terraform
echo 'terraform {
  backend "s3" {
    bucket = "my-tf-state"
    key    = "terraform.tfstate"
    region = "us-east-1"
  }
}' > backend.tf
terraform init

# 8. How S3 is Highly Available
aws s3api get-bucket-location --bucket mybucket
aws s3api get-bucket-replication --bucket mybucket

# 9. Manage S3 Permissions
aws s3api put-bucket-acl --bucket mybucket --acl private
aws s3api put-bucket-policy --bucket mybucket --policy file://policy.json

# 10. Create IAM Role
aws iam create-role --role-name MyRole --assume-role-policy-document file://trust-policy.json

# 11. Create a secure, scalable, and highly available AWS environment
aws elb create-load-balancer --load-balancer-name myelb --listeners Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80 --subnets subnet-abc123
aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-asg --launch-configuration-name my-launch-config --min-size 2 --max-size 5 --desired-capacity 3

# 12. Enable VPC Flow Logs
aws ec2 create-flow-logs --resource-ids vpc-123456 --resource-type VPC --traffic-type ALL --log-group-name my-flow-logs --deliver-logs-permission-arn arn:aws:iam::123456789012:role/FlowLogRole

# 13. Deploy an application with Jenkins
jenkins-cli build my-job

# 14. Reduce Docker image size
docker build --no-cache --squash -t optimized-image:v1 .

# 15. Reduce Jenkins environment resources
java -jar jenkins.war --httpPort=8080 --sessionTimeout=10

# 16. Deploy application in EKS
kubectl apply -f deployment.yaml
kubectl rollout status deployment/my-app
kubectl get pods -o wide

# 17. View ReplicaSet and K8s service types
kubectl get replicaset
kubectl get svc
kubectl describe svc my-service

# 18. Deploy an application CD in Jenkins
jenkins-cli build my-cd-pipeline

# 19. Monitor applications
kubectl logs -f my-pod
kubectl top pod
kubectl top node

# 20. Common Kubernetes troubleshooting
kubectl describe pod mypod
kubectl get events
kubectl logs mypod
kubectl exec -it mypod -- /bin/sh

# 21. Run Jenkins job on a specific node
jenkins-cli build my-job -p NODE=my-node

# 22. Advantages of Master-Node Architecture in Jenkins
echo "Master manages jobs, Agents execute them."

# 23. Connect EC2 in a private subnet
ssh -i my-key.pem ec2-user@bastion-host
ssh -i my-key.pem ec2-user@private-instance -J ec2-user@bastion-host

# 24. Setup Auto Scaling Group
aws autoscaling create-auto-scaling-group --auto-scaling-group-name my-asg --launch-configuration-name my-launch-config --min-size 1 --max-size 5 --desired-capacity 2 --vpc-zone-identifier "subnet-abc123,subnet-def456"

# 25. What happens when I change a Dockerfile instruction?
docker build -t myimage:v2 .

# 26. Manage Secrets & ConfigMaps in K8s
kubectl create secret generic my-secret --from-literal=password=mypassword
kubectl create configmap my-config --from-file=config.properties
kubectl get secrets
kubectl get configmaps

# 27. Terraform modules use cases
echo 'module "vpc" { source = "./vpc-module" }' >> main.tf
terraform get

# 28. Enable S3 versioning
aws s3api put-bucket-versioning --bucket mybucket --versioning-configuration Status=Enabled
aws s3api get-bucket-versioning --bucket mybucket

# 29. Secure Terraform statefile
echo 'encrypt = true' >> backend.tf
terraform init

# 30. Delete a resource without downtime
terraform apply -replace="aws_instance.example"

# 31. Use values from another Terraform module
echo 'output "vpc_id" { value = module.vpc.vpc_id }' >> main.tf

# 32. Secure Terraform scripts in Git
git secret add main.tf
git secret hide
git commit -am "Secured Terraform script"
