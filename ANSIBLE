Syntax validate:
================
ansible-playbook your_playbook.yml --syntax-check

ansible-playbook your_playbook.yml --check
You can simulate execution without making changes:  --  This is helpful to see what would happen without actually running it.

---------------------------------------------------------------

ansible all -i inventory -m command -a "df -h"
ansible all -i inventory -m apt -a "name=nginx state=present"  # For Debian/Ubuntu


ansible all -i inventory -m copy -a "src=/path/to/local/file dest=/path/to/remote/file"

ansible-playbook site.yml -e "env=dev"
ansible-playbook -i inventories/dev/hosts site.yml

---------------------------------------------------------------


ansible-playbook -i inventory.ini install_nginx.yml

inventory.ini -- this file is contain the inventory host deatils
install_nginx.yml -- this is actual tasks and what to do in server


Verbosity Levels:

-v ‚Üí basic extra info
-vv ‚Üí more detailed
-vvv ‚Üí very detailed (used often for debugging)
-vvvv ‚Üí includes connection details, SSH-level output



11. If a playbook fails midway, how do you resume it?
Answer: I use:

ansible-playbook site.yml --start-at-task="Task Name"
Also, since Ansible is idempotent, I can rerun the playbook safely without causing issues.



register	Capture output of a task for conditional logic
rollback	Use backup, block-rescue, or versioning to revert changes if deployment fails

a. Backup before deploy

- name: Backup current WAR file
  copy:
    src: /opt/app/app.war
    dest: /opt/backup/app.war_{{ ansible_date_time.iso8601 }}
    remote_src: yes

b. Restore backup if deployment fails (using block-rescue)

- name: Deploy application with rollback
  block:
    - name: Stop the service
      service:
        name: myapp
        state: stopped

    - name: Deploy new WAR file
      copy:
        src: files/new_app.war
        dest: /opt/app/app.war

    - name: Start the service
      service:
        name: myapp
        state: started

  rescue:
    - name: Rollback WAR file
      copy:
        src: /opt/backup/app.war_2025-04-08T10:00:00Z
        dest: /opt/app/app.war
        remote_src: yes

    - name: Start the service after rollback
      service:
        name: myapp
        state: started
üîÑ block: Main deployment
üöë rescue: Triggered if any task inside block fails


1.What is ignore_errors and when do you use it?
------------------------------------------------
- 'ignore_errors: yes' allows the playbook to continue even if the task fails.
- Useful for non-critical tasks or expected failures.

Example:
- name: Stop a non-existing service
  service:
    name: dummy
    state: stopped
  ignore_errors: yes


2.How do you use register and access the output?
-----------------------------------------------
- Use 'register' to store the output of a task.
- Access it using the registered variable.

Example:
- name: Check disk space
  command: df -h
  register: disk_status

- name: Show output
  debug:
    var: disk_status.stdout


3.What‚Äôs the difference between when, changed_when, and failed_when?
--------------------------------------------------------------------
- when: Runs a task only if the condition is true.
- changed_when: Tells Ansible when to mark the task as "changed".
- failed_when: Tells Ansible when to mark the task as "failed".

Example:
- when: ansible_os_family == "RedHat"
- changed_when: output.stdout != ""
- failed_when: "'ERROR' in result.stderr"


4.What‚Äôs the difference between with_items and loop?
---------------------------------------------------
- Both are used to loop over a list.
- 'loop' is newer and recommended.
- 'with_items' is older but still supported.

Example using loop:
- name: Install packages
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - git
    - vim
    - curl


5.How do you run only tagged tasks in a playbook?
------------------------------------------------
- Use --tags option with ansible-playbook command.

Command:
ansible-playbook site.yml --tags "setup"


6.What is the role of handlers and when are they triggered?
----------------------------------------------------------
- Handlers are triggered only when notified.
- Usually used for restarting services after config changes.

Example:
- name: Update config
  copy:
    src: config.conf
    dest: /etc/myapp.conf
  notify: Restart app

handlers:
  - name: Restart app
    service:
      name: myapp
      state: restarted


7.How do you use block, rescue, and always for error handling?
-------------------------------------------------------------
- block: Try a set of tasks.
- rescue: Run if block fails.
- always: Always runs regardless of success or failure.

Example:
- block:
    - name: Risky command
      command: /bin/false
  rescue:
    - name: Handle error
      debug:
        msg: "Something went wrong"
  always:
    - name: Always run
      debug:
        msg: "Cleanup step"




































Idempotence ‡∞Ö‡∞Ç‡∞ü‡±á ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?

Ansible‡∞≤‡±ã Idempotence ‡∞Ö‡∞®‡±á‡∞¶‡∞ø ‡∞í‡∞ï ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Æ‡±à‡∞® ‡∞ï‡∞æ‡∞®‡±ç‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±ç. ‡∞¶‡±Ä‡∞®‡∞ø ‡∞Ö‡∞∞‡±ç‡∞•‡∞Ç ‡∞è‡∞Æ‡∞ø‡∞ü‡∞Ç‡∞ü‡±á ‚Äî ‡∞í‡∞ï‡±á playbook‡∞®‡∞ø ‡∞é‡∞Ç‡∞§‡∞∏‡∞æ‡∞∞‡±ç‡∞≤‡±Å ‡∞®‡∞°‡∞ø‡∞™‡∞ø‡∞®‡∞æ (run ‡∞ö‡±á‡∞∏‡∞ø‡∞®‡∞æ) ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç ‡∞í‡∞ï‡±ç‡∞ï‡∞ü‡±á ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞Ö‡∞Ç‡∞ü‡±á, ‡∞Æ‡±ä‡∞¶‡∞ü‡∞ø ‡∞∏‡∞æ‡∞∞‡∞ø ‡∞ö‡±á‡∞∏‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞è ‡∞Æ‡∞æ‡∞∞‡±ç‡∞™‡±Å‡∞≤‡±Å ‡∞ú‡∞∞‡∞ø‡∞ó‡∞æ‡∞Ø‡±ã, ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞®‡∞°‡∞ø‡∞™‡∞ø‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Ö‡∞µ‡±á ‡∞Æ‡∞æ‡∞∞‡±ç‡∞™‡±Å‡∞≤‡±Å ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞ú‡∞∞‡∞ó‡∞µ‡±Å ‚Äî ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡∞Ç‡∞ü‡±á ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Æ‡±à‡∞®‡∞™‡±ç‡∞™‡±Å‡∞°‡±á ‡∞Æ‡∞æ‡∞∞‡±ç‡∞™‡±Å‡∞≤‡±Å ‡∞ú‡∞∞‡±Å‡∞ó‡±Å‡∞§‡∞æ‡∞Ø‡∞ø.

‡∞¶‡±Ä‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Ç?

Idempotence ‡∞µ‡∞≤‡∞® ‡∞Æ‡∞®‡∞Ç ‡∞µ‡±É‡∞¶‡±ç‡∞ß‡∞ø ‡∞ö‡±á‡∞∏‡∞ø‡∞® Infrastructure (servers, configurations ‡∞µ‡∞ó‡±à‡∞∞‡∞æ) ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞ø‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ, ‡∞∏‡±ç‡∞•‡∞ø‡∞∞‡∞Ç‡∞ó‡∞æ, ‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞°‡±á‡∞≤‡∞æ ‡∞ö‡±Ç‡∞∏‡±Å‡∞ï‡±ã‡∞µ‡∞ö‡±ç‡∞ö‡±Å. ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä playbook ‡∞∞‡∞®‡±ç ‡∞ö‡±á‡∞∏‡∞ø‡∞®‡∞æ ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø‡∞≤‡±Å ‡∞∞‡∞æ‡∞µ‡±Å, ‡∞≤‡±á‡∞¶‡∞æ ‡∞Ö‡∞ï‡∞∏‡±ç‡∞Æ‡∞æ‡∞§‡±ç‡∞§‡±Å‡∞ó‡∞æ settings ‡∞Æ‡∞æ‡∞∞‡∞ø‡∞™‡±ã‡∞µ‡±Å.

‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£‡∞ï‡±Å:

‡∞í‡∞ï ‡∞´‡±à‡∞≤‡±ç ‡∞í‡∞ï ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü permissions ‡∞§‡±ã ‡∞â‡∞Ç‡∞°‡∞æ‡∞≤‡∞ø ‡∞Ö‡∞®‡±á task ‡∞∞‡∞æ‡∞∏‡∞æ‡∞Ç ‡∞Ö‡∞®‡±Å‡∞ï‡±ã. ‡∞Ö‡∞¶‡∞ø ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞Ö‡∞≤‡∞æ‡∞®‡±á ‡∞â‡∞Ç‡∞¶‡∞Ç‡∞ü‡±á Ansible ‡∞¶‡∞æ‡∞®‡∞ø‡∞®‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≥‡±Ä ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞¶‡±Å. ‡∞Ö‡∞Ç‡∞§‡±á ‚Äî ‡∞á‡∞¶‡∞ø Idempotence ‡∞µ‡∞≤‡±ç‡∞≤ ‡∞∏‡∞æ‡∞ß‡±ç‡∞Ø‡∞Æ‡∞µ‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.

‡∞∏‡∞Ç‡∞ï‡±ç‡∞∑‡±á‡∞™‡∞Ç‡∞ó‡∞æ ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞æ‡∞≤‡∞Ç‡∞ü‡±á:

Ansible ‡∞≤‡±ã Idempotence ‡∞Ö‡∞®‡±á‡∞¶‡∞ø ‡∞í‡∞ï playbook‡∞®‡±Å ‡∞é‡∞Ç‡∞§‡∞∏‡∞æ‡∞∞‡±ç‡∞≤‡±Å ‡∞®‡∞°‡∞ø‡∞™‡∞ø‡∞®‡∞æ ‡∞Ö‡∞¶‡±á ‡∞´‡∞≤‡∞ø‡∞§‡∞Ç ‡∞µ‡∞ö‡±ç‡∞ö‡±á‡∞≤‡∞æ ‡∞ö‡±Ç‡∞∏‡±á ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞Ç. ‡∞á‡∞¶‡∞ø Stability ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å Predictability ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Æ‡±à‡∞®‡∞¶‡∞ø.

