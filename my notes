Cluster: The outermost box grouping all nodes.
Node: Larger internal boxes containing pods.
Pod: Smaller boxes within nodes that may contain one or more containers.


+--------------------------------------+
| Kubernetes Cluster                   |
|                                      |
|   +------------------------------+   |
|   | Node 1                       |   |
|   |                              |   |
|   |   +--------+   +--------+    |   |
|   |   |  Pod 1 |   |  Pod 2 |    |   |
|   |   +--------+   +--------+    |   |
|   +------------------------------+   |
|                                      |
|   +------------------------------+   |
|   | Node 2                       |   |
|   |                              |   |
|   |   +--------+   +--------+    |   |
|   |   |  Pod 3 |   |  Pod 4 |    |   |
|   |   +--------+   +--------+    |   |
|   +------------------------------+   |
+--------------------------------------+


============================================
             Kubernetes Services
============================================

Feature          ClusterIP        NodePort       LoadBalancer    Ingress
------------------------------------------------------------------------
Access Scope     Internal         External       External        External
                 (Cluster-only)   (Node IP+Port) (Cloud LB IP)   (Domain/IP+Path)
------------------------------------------------------------------------
Use Case         Internal         Direct         Expose          HTTP(S)
                 communication    external       services via    routing,
                                  testing         cloud LB        multiple services
------------------------------------------------------------------------
Complexity       Simple           Simple         Moderate        Advanced
------------------------------------------------------------------------
Cost             None             None           Cloud-provider  Controller-
                                                   dependent       dependent

When to Use Each:
  ClusterIP: For services that only other services or pods need to access.
  NodePort: For quick testing or exposing services directly.
  LoadBalancer: For production-grade external access with cloud provider support.
  Ingress: For advanced routing with multiple services, especially in HTTP-based apps.
========================================================================================================================================
+------------------+       +------------------+       +----------------------+
|  User/Client     |       |  Load Balancer   |       |   External Services  |
|  (kubectl/API)   | ----> |  (Ingress/Egress)| <---> |  (DBs, APIs, Storage)|
+------------------+       +------------------+       +----------------------+
          |
          v
+-----------------------------------+
|      Kubernetes Cluster           |
|                                   |
|   +---------------------------+   |
|   |       Control Plane       |   |  <-- API Server, Scheduler, etc.
|   +---------------------------+   |
|                                   |
|   +---------------------------+   |
|   |          Nodes            |   |
|   |   (Pods/Containers)       |   |
|   +---------------------------+   |
+-----------------------------------+
          ^
          |
+--------------------------+
| Monitoring & Logging     |
|   (e.g., Datadog, ELK)   |
+--------------------------+

==========================================================================================================================================



Declarative Pipelines: Cleaner, easier to understand, and ideal for most projects.
Scripted Pipelines: More flexible but harder to maintain, suitable for complex requirement



Terraform State Files: Track infrastructure resources managed by Terraform locally.

Remote Backends: Store state files in a central location (e.g., S3) to enable team collaboration and state locking.






Feature	Purpose
SNS	Send notifications or messages to multiple subscribers simultaneously.
SQS	Queue messages for asynchronous processing.
NAT Gateway	Allows private subnet instances to access the internet securely.


Service	Purpose	Use Case
EC2	Virtual servers in the cloud	Hosting applications, databases, websites
S3	Scalable object storage	Storing static files, backups, datasets
EFS	Shared file storage for EC2	Distributed applications needing shared data
IAM	Manage user access and permissions	Secure access to AWS services
VPC	Isolated network for your AWS resources	Custom networking for applications
CloudFront	CDN for fast content delivery	Speed up websites, APIs, or streaming content
VPC Peering	Connect two VPCs privately	Secure communication between VPCs
NAT Gateway	Allow private subnet instances to access the internet securely	Update servers, fetch resources securely





Stateful Systems:

When you need a continuous session or interaction (e.g., e-commerce cart, multiplayer games).
When the user experience benefits from context retention.

Stateless Systems:

For scalable and distributed applications (e.g., APIs, serverless functions).
When stateless interactions are sufficient or preferred.



Use Persistent Volumes when you need to store data persistently across pod restarts or reschedules.
Use Persistent Volume Claims to request and consume storage resources dynamically, allowing your applications to use the storage without worrying about the underlying hardware.

Ingress in Kubernetes allows you to manage external access to your services, with features like routing and SSL termination.
